To do
-------------

dune/

	compBasic/
		
		Component (abstract || Interface)
			clear()
		
		CompTransform -> Component
			x:Float
			y:Float
			
	entities/
	
		Entity
			transform:Transform
			display:CompDisplay
			inputs:Array<Input>
			clear()
	
	systems/
	
		space
			SysSpace
				_actorList:Array<PhysBody>
				_objectGrid:Array<Array<Array<PhysBody>>>
				setSize( minX:Int, minY:Int, maxX:Int, maxY:Int, cellW:Int, cellH:Int )
				
				addBody( body:PhysBody )
				addBodies( body:Array<PhysBody> )
				removeBody( body:PhysBody )
				removeBodies( bodies:Array<PhysBody> )
				
				update()
				hitTestAndDispatch()
		
		physic/
			SysPhysic -> System
				gX:Float
				gY:Float
			
			Components/
				CompTransformPhysic -> CompTransform
					vx:Float
					vy:Float
					friction:Float
					hasMoved( restart:Bool = false ):Bool
					
				PhysBody -> Component
					entity
					shape
					contacts:Array<PhysBody>
					
					collision_type = PASSIVE
					solid_type = PLATFORM | LADDER | WALL | ITEM (life, ennemy...)
				
				PhysBodyActive -> PhysBody
					collision_type = ACTIVE
					onCollide():Callback( PhysBody, PhysBody )
				
			Shapes
				PhysShape [abstract]
					aabbXMin
					aabbXMax
					aabbYMin
					aabbYMax
				PhysShapeCircle -> PhysShape
				PhysShapeRect -> PhysShape
				PhysShapePoint -> PhysShape
				PhysShapeUtil
					hitTest()
				
		graphic/
			SysGraphic -> System
			
		input/
			SysInput -> System
			Components/
				CompInput -> Input
					execute(entity)
				CompJoystick -> CompInput
				CompIA -> CompInput
	
		System (abstract)
			refresh(dt:Float):void
		
		SysManager
			space:SysSpace -> System
			graphic:SysGraphic
			physic:SysPhysic
			
			add( entity:Entity )
			remove( entity:Entity )
		
		
	Game
		refresh()
		scene:Scene